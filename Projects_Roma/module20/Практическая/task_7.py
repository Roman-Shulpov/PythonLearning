# Задача 7. Своя функция zip Что нужно сделать В самом конце собеседования вам неожиданно сказали: «Расскажите,
# что делает функция zip». Чтобы произвести впечатление, вы решили не только рассказать о ней, но и написать её аналог.
#
# Даны строка и кортеж из чисел. Напишите программу, которая создаёт генератор из пар кортежей «символ — число».
# Затем выведите на экран сам генератор и кортежи.
#
# Пример:
#
# Строка: abcd
#
# Кортеж чисел: (10, 20, 30, 40)
#
# Результат:
#
# <generator object <genexpr> at 0x00000204A4234048>
#
# ('a', 10)
#
# ('b', 20)
#
# ('c', 30)
#
# ('d', 40)
#
# Дополнительно: создайте полный аналог функции zip — сделайте так, чтобы программа работала с любыми итерируемыми
# типами данных.
#
# Подсказка
#
# Ранее мы проходили List comprehensions — по сути, генератор списка. В этом случае, чтобы создать генератор,
# попробуйте поэкспериментировать с генератором списка.
#
# Пример:
#
# print([i for i in range(10)])
#
# print((i for i in range(10)))
#
# Что оценивается
# Результат вычислений корректен.
# Формат вывода соответствует примеру.
# Основной функционал описан в отдельной функции или функциях.
# Переменные и функции имеют значимые имена, не только a, b, c, d.

def my_zip(*iterables):
    min_len = min(len(iterable) for iterable in iterables)
    for i in range(min_len):
        yield tuple(iterable[i] for iterable in iterables)


def main():
    input_string = input("Введите строку: ")
    input_tuple = eval(input("Введите кортеж чисел: "))
    zipped_generator = my_zip(input_string, input_tuple)

    print(zipped_generator)

    for pair in zipped_generator:
        print(pair)


if __name__ == "__main__":
    main()
