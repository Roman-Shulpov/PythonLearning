# Задача 1. Ревью кода
# Что нужно сделать
#
# В задании был словарь из трёх студентов. Необходимо:
#
# Вывести на экран список пар «ID студента — возраст». Написать функцию, которая принимает в качестве аргумента
# словарь и возвращает два значения: полный список интересов всех студентов и общую длину всех фамилий студентов.
# Далее в основном коде вызывается функция, значения присваиваются отдельным переменным и выводятся на экран.
#
# Ваня — очень придирчивый программист, и после просмотра кода он понял, что этого кандидата на работу не возьмёт,
# хотя код выдаёт верный результат. Вот код кандидата:
#
students = {
    1: {
        'name': 'Bob',
        'surname': 'Vazovski',
        'age': 23,
        'interests': ['biology, swimming']
    },
    2: {
        'name': 'Rob',
        'surname': 'Stepanov',
        'age': 24,
        'interests': ['math', 'computer games', 'running']
    },
    3: {
        'name': 'Alexander',
        'surname': 'Krug',
        'age': 22,
        'interests': ['languages', 'health food']
    }
}
pairs = []
for i in students:
    pairs += (i, students[i]['age'])
    result = [(pairs[i], pairs[i + 1]) for i in range(0, len(pairs), 2)]

interests_list = []
for key, value in students.items():
    add_interests = value['interests']
    interests_list += add_interests

surname = ''
for key, value in students.items():
    add_surname = value['surname']
    surname += add_surname
    total_lenght_of_surnames = len(surname)

print(f"Список пар «ID студента — возраст»: {result}")
print(f'Полный список интересов всех студентов: {interests_list}')
print(f"Общая длина всех фамилий студентов: {total_lenght_of_surnames}")
# 
# my_lst = f(students)[0] l = f(students)[1] print(my_lst, l) Перепишите этот код так, чтобы он был максимально
# pythonic и Ваня мало к чему мог придраться (только если очень захочется). Убедитесь, что программа верно работает.
# Проверки на существование записей в словаре не обязательны, но приветствуются.
#
# Результат работы программы:
#
# Список пар «ID студента — возраст»: [(1, 23), (2, 24), (3, 22)]
#
# Полный список интересов всех студентов: {'running', 'computer games', 'math', 'languages', 'biology, swimming',
# 'health food'}
#
# Общая длина всех фамилий студентов: 20
#
# Советы и рекомендации Обратите внимание на нейминг — имена переменных и функций должны быть полезными и понятными (
# не стоит использовать одиночные буквы, непонятные сокращения). Названия не должны пересекаться с уже существующими
# в Python объектами (например, лучше не называть свою переменную print или list). Попробуйте найти лишние действия в
# коде. Если вы сможете получить нужный результат меньшим количеством действий, то не нужно заставлять Python
# выполнять лишние действия. Также нет необходимости заставлять Python выполнять одни и те же действия над одним и
# тем же объектом (например, вызывать функцию с одними и теми же входными данными несколько раз). Что оценивается
# Результат вычислений корректен. Формат вывода соответствует примеру. Переменные и функции имеют значимые имена,
# не только a, b, c, d Новый код более оптимизирован и чист по стилю программирования (pythonic), чем старый.
